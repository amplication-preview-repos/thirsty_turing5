/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Container } from "@prisma/client";

export class ContainerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ContainerCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContainerCountArgs>
  ): Promise<number> {
    return this.prisma.container.count(args);
  }

  async containers<T extends Prisma.ContainerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContainerFindManyArgs>
  ): Promise<Container[]> {
    return this.prisma.container.findMany(args);
  }
  async container<T extends Prisma.ContainerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContainerFindUniqueArgs>
  ): Promise<Container | null> {
    return this.prisma.container.findUnique(args);
  }
  async createContainer<T extends Prisma.ContainerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContainerCreateArgs>
  ): Promise<Container> {
    return this.prisma.container.create<T>(args);
  }
  async updateContainer<T extends Prisma.ContainerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContainerUpdateArgs>
  ): Promise<Container> {
    return this.prisma.container.update<T>(args);
  }
  async deleteContainer<T extends Prisma.ContainerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContainerDeleteArgs>
  ): Promise<Container> {
    return this.prisma.container.delete(args);
  }
}
